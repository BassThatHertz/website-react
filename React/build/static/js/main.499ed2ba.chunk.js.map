{"version":3,"sources":["FileInput.js","mp3/BitrateSlider.js","mp3/VbrDropdown.js","mp3/EncodingTypeSelector.js","aac/BitrateSlider.js","aac/VbrDropdown.js","aac/EncodingTypeSelector.js","SubmitButton.js","App.js","index.js"],"names":["fileInput","props","className","accept","type","id","onInput","updateBoxes","BitrateSlider","min","max","step","onChange","onMp3BitrateChange","value","bitrate","VbrDropdown","onVbrSettingChange","this","htmlFor","disabled","target","href","React","Component","Mp3EncodingTypeSelector","mp3EncodingType","onMp3EncodingTypeChange","renderComponent","sliderMoved","onVbrModeChange","vbrMode","AacEncodingTypeSelector","onAacEncodingTypeChange","encodingType","onSliderMoved","sliderValue","o","SubmitButton","submitClicked","onSubmit","onClick","App","state","file","codec","mp3Bitrate","mp3VbrSetting","aacEncodingMode","aacSlider","aacVbrMode","onFileInput","e","filename","files","name","filetype","console","log","setState","document","getElementById","innerText","outputNameBox","defaultOutputName","split","slice","join","replace","onCodecChange","innerHTML","onMp3VbrSettingChange","onAacSliderMoved","onAacVbrModeChange","a","data","FormData","append","fetch","method","body","response","text","progressFilename","FileInput","autoComplete","maxLength","required","ReactDOM","render"],"mappings":"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","file":"static/js/main.499ed2ba.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction fileInput(props) {\r\n    async function bla() {\r\n        console.log('test')\r\n    }\r\n    return (\r\n        <div className=\"custom-file\">\r\n            <input \r\n                accept=\".mp3, .aac, .m4a, .wav, .flac, .ogg, .opus, .flv, .mp4, .avi, .wmv, .wma, .mka, .mkv, .MTS,\r\n                .mts, .ac3, .3gp, .dts, .webm, .ADPCM, .adpcm, .spx, .caf, .mov, .dtshd, .thd, .aif, .aiff, .vob\"\r\n                type=\"file\" className=\"custom-file-input\" id=\"file_input\" onInput={props.updateBoxes} /> \r\n            <label id=\"file_input_label\" className=\"custom-file-label\">Select file</label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default fileInput;","import React from 'react'\r\n\r\nfunction BitrateSlider(props) {\r\n    return (\r\n        <div id=\"mp3_slider_div\">\r\n            <p>Set your desired bitrate via the slider:</p>\r\n            <input\r\n                type=\"range\" min=\"64\" max=\"320\" step=\"64\"\r\n                onChange={props.onMp3BitrateChange} value={props.bitrate} \r\n            />\r\n            <span id=\"bitrateText\">{` ${props.bitrate} kbps`}</span><br/><br/>\r\n            <i>A higher bitrate allows for potentially higher audio quality, at the expense of a larger file size.</i>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BitrateSlider;","import React from 'react'\r\n\r\nclass VbrDropdown extends React.Component {\r\n    render() {\r\n        const onVbrSettingChange = this.props.onVbrSettingChange\r\n        return (\r\n            <div>\r\n                <label htmlFor=\"mp3_vbr_setting\">Setting:</label>\r\n                <select id=\"mp3_vbr_setting\" onChange={onVbrSettingChange}>\r\n                <option disabled value>Select VBR setting</option>\r\n                    <option value=\"0\">-V 0 (~240kbps)</option>\r\n                    <option value=\"1\">-V 1 (~220kbps)</option>\r\n                    <option value=\"2\">-V 2 (~190kbps)</option>\r\n                    <option value=\"3\">-V 3 (~170kbps)</option>\r\n                    <option value=\"4\">-V 4 (~160kbps)</option>\r\n                    <option value=\"5\">-V 5 (~130kbps)</option>\r\n                    <option value=\"6\">-V 6 (~120kbps)</option>\r\n                </select><br />\r\n                <i>For more details about the settings, click\r\n                <a target=\"_blank\" href=\"http://wiki.hydrogenaud.io/index.php?title=LAME#Recommended_settings_details\">here</a>.\r\n                </i>\r\n            </div>  \r\n        )\r\n    }\r\n}\r\n\r\nexport default VbrDropdown;","import React from 'react';\r\nimport BitrateSlider from './BitrateSlider';\r\nimport VbrDropdown from './VbrDropdown';\r\n\r\nfunction Mp3EncodingTypeSelector(props) {\r\n\r\n  function renderComponent() {\r\n    switch (props.mp3EncodingType) {\r\n      // Show the BitrateSlider component if CBR or ABR is selected. Show the VbrDropdown component if VBR is selected.\r\n      case 'cbr':\r\n        return <BitrateSlider \r\n                onMp3BitrateChange={props.onMp3BitrateChange}\r\n                bitrate={props.bitrate} />;\r\n      case 'abr':\r\n        return <BitrateSlider \r\n                onMp3BitrateChange={props.onMp3BitrateChange}\r\n                bitrate={props.bitrate} />;\r\n      case 'vbr':\r\n        return <VbrDropdown onVbrSettingChange={props.onVbrSettingChange} />;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id=\"mp3_encoding_div\">\r\n      <label htmlFor=\"mp3_encoding_type\">Encoding Type:</label>\r\n      <select value={props.mp3EncodingType} id=\"mp3_encoding_type\" onChange={props.onMp3EncodingTypeChange}>\r\n        <option disabled value>\r\n          Select encoding type\r\n        </option>\r\n        <option value=\"cbr\">CBR (Constant Bitrate)</option>\r\n        <option value=\"abr\">ABR (Average Bitrate)</option>\r\n        <option value=\"vbr\">VBR (Variable Bitrate)</option>\r\n      </select>\r\n      {renderComponent()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Mp3EncodingTypeSelector;","import React from 'react';\r\n\r\nfunction BitrateSlider(props) {\r\n    return (\r\n        <div id=\"fdk_cbr_div\">\r\n            <p>Set your desired bitrate via the slider:</p>\r\n            <input type=\"range\" onChange={props.sliderMoved} min=\"32\" max=\"512\" step=\"32\" value={props.bitrate} id=\"fdk_slider\" className=\"slider\"/>\r\n            <span id=\"fdkvalue\">{` ${props.bitrate} kbps`}</span>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default BitrateSlider;","import React from 'react'\r\n\r\nfunction VbrDropdown(props) {\r\n    return (\r\n        <div id=\"fdk_vbr_div\">\r\n            <label htmlFor=\"fdk_vbr_value\">VBR mode:</label>\r\n            <select id=\"fdk_vbr_value\" onChange={props.onVbrModeChange} value={props.vbrMode}>\r\n                <option disabled value>Select VBR mode</option>\r\n                <option value=\"1\">1</option>\r\n                <option value=\"2\">2</option>\r\n                <option value=\"3\">3</option>\r\n                <option value=\"4\">4</option>\r\n                <option value=\"5\">5</option>\r\n            </select><br></br>\r\n            <i>Quality range is from 1 (lowest) to 5 (highest).</i>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VbrDropdown;","import React from 'react';\r\nimport BitrateSlider from './BitrateSlider'\r\nimport VbrDropdown from './VbrDropdown'\r\n\r\nfunction AacEncodingTypeSelector(props) {\r\n    \r\n    function renderComponent() {\r\n        switch (props.encodingType) {\r\n          case 'cbr':\r\n            return <BitrateSlider \r\n                    sliderMoved={props.onSliderMoved}\r\n                    bitrate={props.sliderValue} />;\r\n          case 'vbr':\r\n            return <VbrDropdown o\r\n                    onVbrModeChange={props.onVbrModeChange}\r\n                    vbrMode={props.vbrMode} />;\r\n          default:\r\n            return null;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div id=\"FDK\">\r\n            <label htmlFor=\"fdk_encoding\">CBR or VBR:</label>\r\n            <select id=\"fdk_encoding\" onChange={props.onAacEncodingTypeChange}>\r\n                <option disabled value>Select Encoding Type</option>\r\n                <option value=\"cbr\">CBR (Constant Bitrate)</option>\r\n                <option value=\"vbr\">VBR (Variable Bitrate)</option>\r\n            </select>\r\n            {renderComponent()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AacEncodingTypeSelector;","import React from 'react'\r\n\r\nclass SubmitButton extends React.Component {\r\n    submitClicked = () => {\r\n        this.props.onSubmit();\r\n    }\r\n\r\n    render () {\r\n        return (\r\n        <button id=\"convert_btn\" className=\"btn btn-primary\" onClick={this.submitClicked}>Submit</button>\r\n        )\r\n    }\r\n}\r\nexport default SubmitButton;","import React from 'react';\r\nimport FileInput from './FileInput';\r\nimport Mp3EncodingTypeSelector from './mp3/EncodingTypeSelector';\r\nimport AacEncodingTypeSelector from './aac/EncodingTypeSelector';\r\nimport SubmitButton from './SubmitButton';\r\n\r\nclass App extends React.Component {\r\n  state = { \r\n            file: null,  \r\n            codec: 'MP3',\r\n            mp3EncodingType: 'cbr',\r\n            mp3Bitrate: '192',\r\n            mp3VbrSetting: '0',\r\n            // AAC\r\n            aacEncodingMode: 'cbr',\r\n            aacSlider: '256',\r\n            aacVbrMode: '5'\r\n          };\r\n  \r\n  onFileInput = (e) => {\r\n    const filename = e.target.files[0].name;\r\n    const filetype = e.target.files[0].type;\r\n    console.log(filename, filetype, e.target.files[0])\r\n\r\n    this.setState({ file: e.target.files[0] })\r\n    console.log(this.state.file)\r\n\r\n    const inputLabel = document.getElementById(\"file_input_label\");\r\n    inputLabel.innerText = e.target.files[0].name; // Show the name of the selected file.\r\n    \r\n    const outputNameBox = document.getElementById(\"output_name\");\r\n    const nameWithoutExt = filename.split('.').slice(0, -1).join('.')\r\n    // Remove percentage sign(s) as this causes an issue when secure_filename is used in main.py\r\n    const defaultOutputName = nameWithoutExt.replace(/%/g, ''); \r\n    outputNameBox.value = defaultOutputName;\r\n  }\r\n\r\n  onCodecChange = (e) => {\r\n    this.setState({ codec: e.target.value });\r\n  };\r\n\r\n  // MP3\r\n\r\n  onMp3EncodingTypeChange = (e) => {\r\n    this.setState({ mp3EncodingType: e.target.value});\r\n  };\r\n  onMp3BitrateChange = (e) => {\r\n    this.setState({ mp3Bitrate: e.target.value });\r\n    document.getElementById('bitrateText').innerHTML = `${e.target.value} kbps`\r\n  }\r\n  onMp3VbrSettingChange = (e) => {\r\n    this.setState({ mp3VbrSetting: e.target.value })\r\n\r\n  }\r\n\r\n  // AAC\r\n\r\n  onAacEncodingTypeChange = (e) => {\r\n    this.setState({ aacEncodingMode: e.target.value});\r\n  }\r\n  onAacSliderMoved = (e) => {\r\n    this.setState({ aacSlider: e.target.value });\r\n    document.getElementById('fdkvalue').innerHTML = `${e.target.value} kbps`\r\n  }\r\n  onAacVbrModeChange = (e) => {\r\n    this.setState({ aacVbrMode: e.target.value} );\r\n  }\r\n\r\n  submitClicked = async() => {\r\n    console.log(this.state)\r\n    const data = new FormData();\r\n    data.append('file', this.state.file)\r\n  \r\n    const response = await fetch(\"/\", {\r\n      method: 'POST',\r\n      body: data\r\n    });\r\n    const progressFilename = await response.text()\r\n    console.log(progressFilename)\r\n  };\r\n\r\n  renderComponent = () => {\r\n    const codec = this.state.codec\r\n    switch (codec) {\r\n      case 'MP3':\r\n        return (\r\n          <Mp3EncodingTypeSelector\r\n            mp3EncodingType={this.state.mp3EncodingType}\r\n            bitrate={this.state.mp3Bitrate}\r\n            // Passing the functions as props.\r\n            onMp3EncodingTypeChange={this.onMp3EncodingTypeChange}\r\n            onMp3BitrateChange={this.onMp3BitrateChange}\r\n            onMp3VbrSettingChange={this.onMp3VbrSettingChange} />\r\n        );\r\n      case 'AAC':\r\n          return (\r\n            <AacEncodingTypeSelector\r\n              onAacEncodingTypeChange={this.onAacEncodingTypeChange}\r\n              encodingType={this.state.aacEncodingMode}\r\n              onSliderMoved={this.onAacSliderMoved}\r\n              sliderValue={this.state.aacSlider}\r\n              onVbrModeChange={this.onAacVbrModeChange} \r\n              vbrMode={this.state.aacVbrMode} />\r\n          )\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Audio / Video Converter</h1>\r\n        <p id=\"tagline\">An easy to use, ad-free website to meet some of your audio/video needs :)</p>\r\n        <h5>Select a file, or drag and drop a file onto this webpage.</h5>\r\n        <FileInput \r\n        updateBoxes={this.onFileInput} />\r\n        <hr></hr><h5>Desired Format</h5>\r\n        <select\r\n          id=\"codecs\"\r\n          onChange={this.onCodecChange}\r\n          value={this.state.codec}>\r\n          <option value=\"AAC\">AAC (.m4a)</option>\r\n          <option value=\"AC3\">AC3 (Dolby Digital)</option>\r\n          <option value=\"ALAC\">ALAC</option>\r\n          <option value=\"CAF\">CAF (.caf)</option>\r\n          <option value=\"DTS\">DTS</option>\r\n          <option value=\"FLAC\">FLAC</option>\r\n          <option value=\"MKA\">MKA (extract audio without encoding it)</option>\r\n          <option value=\"MKV\">MKV (.mkv)</option>\r\n          <option value=\"MP3\">MP3</option>\r\n          <option value=\"MP4\">MP4 (.mp4)</option>\r\n          <option value=\"Opus\">Opus (.opus)</option>\r\n          <option value=\"Vorbis\">Vorbis (.ogg)</option>\r\n          <option value=\"WAV\">WAV</option>\r\n        </select><br></br><br></br>\r\n        <hr/><h5>Encoder Settings</h5>\r\n        {this.renderComponent()}<br/>\r\n        <hr/><h5>Output Filename</h5>\r\n        <input type=\"text\" autoComplete=\"off\" className=\"form-control\" maxLength=\"200\" id=\"output_name\" required/><br/>\r\n        <SubmitButton onSubmit={this.submitClicked} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React, { Fragment } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n// I want to get that state value from each component file. Why? Because eventually I'm going to send an AJAX request\r\n// to the server with all of the values, so FFmpeg knows what parameters to use for encoding the file.\r\n\r\n// So, what I want to do is:\r\n// Get the selected codec from CodecSelector.js\r\n// If MP3 was selected, for example, get the bitrate type from MP3.js, the bitrate from Mp3Cbr.js \r\n// and the VBR mode from MP3VBR.js\r\n// Send an AJAX request with all of this data. \r\n\r\n\r\n\r\nReactDOM.render(\r\n  <Fragment>\r\n    <App/>\r\n  </Fragment>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}